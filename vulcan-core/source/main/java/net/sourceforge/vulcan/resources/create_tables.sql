create table project_names (
	id int generated by default as identity not null primary key,
	name varchar not null,
	constraint uniq_name unique (name)
);

create table builds (
	id int generated by default as identity not null primary key,
	project_id integer not null,
	
	uuid varchar not null,	
	
	work_dir varchar,
	
	status varchar not null,
	
	message_key varchar not null,
	message_arg_0 varchar,
	message_arg_1 varchar,
	message_arg_2 varchar,
	message_arg_3 varchar,
	
	build_reason_key varchar,
	build_reason_arg_0 varchar,
	build_reason_arg_1 varchar,
	build_reason_arg_2 varchar,
	build_reason_arg_3 varchar,
	
	start_date timestamp not null,
	completion_date timestamp not null,
	
	revision bigint,
	revision_label varchar,
	
	-- if the build failed before getting a revision,
	-- the above columns will map to lastKnownRevision
	revision_unavailable boolean default 0,
		
	build_number int not null,
	last_good_build_number int,
	
	tag_name varchar,
	repository_url varchar,
	
	status_changed boolean,
	
	scheduled_build boolean,
	
	requested_by varchar,
	
	update_type varchar not null,
	
	constraint uniq_project_build_number unique (project_id, build_number),
	constraint uniq_uuid unique (uuid),
	constraint fk_project_id foreign key (project_id) references project_names (id),
	constraint ck_status check (status in ('PASS','FAIL','SKIP','ERROR')),
	constraint ck_update_type check (update_type in ('Full', 'Incremental'))
);

create table build_dependencies (
	build_id integer not null primary key,
	dependency_build_id integer not null,
	
	constraint fk_dependency_build_id foreign key (build_id) references builds (id),
	constraint fk_dependency_id_build_id foreign key (dependency_build_id) references builds (id)
);

create table build_messages (
	build_id integer not null,
	message_type varchar, 
	
	message varchar not null,
	code varchar,
	file varchar,
	line_number integer,
	
	constraint fk_build_message_build_id foreign key (build_id) references builds (id),
	constraint ck_message_type check (message_type in ('E', 'W'))
);

create table metrics (
	build_id integer not null,

	message_key varchar not null,
	data varchar,
	
	constraint fk_metrics_build_id foreign key (build_id) references builds (id)
);

create table test_failures (
	build_id integer not null,
	
	name varchar not null,
	first_consecutive_build_number integer not null,
	
	constraint fk_test_failures_build_id foreign key (build_id) references builds (id)
);

create table change_sets (
	build_id integer not null,
	change_set_id integer not null,
	
	author varchar,
	message varchar,
	revision_label varchar,
	commit_timestamp timestamp,	
	
	constraint fk_change_sets_build_id foreign key (build_id) references builds (id),
	constraint pk_change_sets primary key (build_id, change_set_id)
);

create table modified_paths (
	build_id integer not null,
	change_set_id integer not null,
	
	modified_path varchar not null,
	
	constraint fk_modified_paths_change_set foreign key (build_id, change_set_id) references change_sets (build_id, change_set_id)
);

create index idx_builds_uuid on builds (uuid);